// PIC16F877A Configuration Bit Settings

// 'C' source line config statements

// CONFIG
#pragma config FOSC = EXTRC     // Oscillator Selection bits (RC oscillator)
#pragma config WDTE = OFF        // Watchdog Timer Enable bit (WDT enabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = OFF       // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = OFF         // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3/PGM pin has PGM function; low-voltage programming enabled)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#define _XTAL_FREQ 6000000
void init(void);
unsigned char* reg_b_dir=(unsigned char *) 0x86;
unsigned char* data_b=(unsigned char *)0x06;
unsigned char* reg_d_dir=(unsigned char *) 0x88;
unsigned char* data_d=(unsigned char *) 0x08;
unsigned char* pull_up=(unsigned char *) 0x81;

void main(){
  unsigned char x; 
  init();
  x=*data_b;
  switch(x)
  {
      case 0xE0: *data_d=0x20;
      break;
      case 0xD0: *data_d=0x04;
      break;
      case 0xB0: *data_d=0x00;
      break;
      case 0x70 : *data_d=0x24;
      break;
      default  :  *data_d=0x00;
      break;
  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            
    
}
void init(void)
{
    *pull_up &=0x7F;
    *reg_b_dir=0xF0;
    *data_b=0x00;
    *reg_d_dir=0x00;
    *data_d=0x00;
}

